[{"model": "blog.comment", "pk": 1, "fields": {"creator": 1, "content": "what a great post", "content_type": 8, "object_id": 1, "created_at": "2024-04-07T15:00:47.084Z", "modified_at": "2024-04-07T15:00:47.101Z"}}, {"model": "blog.comment", "pk": 2, "fields": {"creator": 1, "content": "I like myself!", "content_type": 4, "object_id": 1, "created_at": "2024-04-07T15:00:47.084Z", "modified_at": "2024-04-07T15:00:47.101Z"}}, {"model": "blog.comment", "pk": 3, "fields": {"creator": 1, "content": "Great, Thanks", "content_type": 8, "object_id": 1, "created_at": "2024-05-08T10:21:46.791Z", "modified_at": "2024-05-08T10:21:46.791Z"}}, {"model": "blog.comment", "pk": 4, "fields": {"creator": 1, "content": "trying loggers", "content_type": 8, "object_id": 1, "created_at": "2024-05-08T10:59:11.919Z", "modified_at": "2024-05-08T10:59:11.919Z"}}, {"model": "blog.tag", "pk": 1, "fields": {"value": "good"}}, {"model": "blog.tag", "pk": 2, "fields": {"value": "not good"}}, {"model": "blog.tag", "pk": 3, "fields": {"value": "educative"}}, {"model": "blog.post", "pk": 1, "fields": {"author": 1, "created_at": "2024-04-05T17:07:04.462Z", "modified_at": "2024-04-05T17:07:04.463Z", "published_at": "2024-04-05T16:04:12Z", "title": "An Exemple Post", "slug": "an-exemple-post", "summary": "A short example post.", "content": "<h3>An exemple post</h3>\r\n<p>This is an example post that uses html to render itself.</p>", "tags": [1, 2]}}, {"model": "blog.post", "pk": 2, "fields": {"author": 2, "created_at": "2024-04-07T20:55:28.364Z", "modified_at": "2024-04-07T20:55:28.364Z", "published_at": "2024-04-07T19:52:54Z", "title": "Advanced Django : A Review", "slug": "advanced-django-a-review", "summary": "This great course is must-do for anyone looking to take the next Django step", "content": "<p>Custom Filters\r\nIn Django templates, you can pass data through filters before it’s rendered. This is done with the | (pipe) operator inside a rendering block. For example, to render a value in lowercase, using the lower filter, you’d do this:\r\n{{ value|lower }}\r\nSome filters accept arguments, which can be sent by adding : (colon) after the filter name. For example, the date filter takes an argument that specifies the output format:\r\n{{ post.published_at|date:\"M, d Y\" }}\r\nDjango has an extensive set of built-in filters, but if none of them quite do the job you need, you can write your own. These can contain more complex logic, which can be easier than trying to write lots of custom code inside your template.\r\nBefore we get into that, let’s add a real page to Blango. It will be a page that lists all the blog posts we have.\r\nTry It Out\r\nFirst, we’ll update the index view to fetch all the Post objects in the system, and send them to the index.html template. This should be functionality you’ve used with Django before. Your views.py will look something like:\r\ndef index(request):\r\n    posts = Post.objects.filter(published_at__lte=timezone.now())\r\n    return render(request, \"blog/index.html\", {\"posts\": posts})\r\nNote the use of the published_at__lte=timezone.now() filter. This means we’ll only load Post objects that have been published (have a publication date in the past).\r\nAlso, be sure to import timezone from django.utils and Post from blog.models, at the start of the file:</p>", "tags": [3]}}, {"model": "blog.post", "pk": 3, "fields": {"author": 1, "created_at": "2024-04-07T20:57:16.588Z", "modified_at": "2024-04-07T20:57:16.588Z", "published_at": "2024-04-05T18:00:00Z", "title": "Template Tag File Set Up", "slug": "template-tag-file-set-up", "summary": "template are a good file setup", "content": "<p>You’ve probably loaded custom template tag libraries into a template before using the build in load template tag. More than likely, you’ve loaded the static template tag library like this:\r\n{% load static %}\r\nDjango looks for template libraries to load inside Python files in the templatetags folder inside Django apps. The template library it loads is simply the name of the file.\r\nFor example, in Blango we’ll create a template tag library with the path blog/templatetags/blog_extras.py. We would load it into the template like this:</p>", "tags": [1, 3]}}, {"model": "blog.post", "pk": 4, "fields": {"author": 3, "created_at": "2024-04-08T20:52:25.415Z", "modified_at": "2024-04-08T20:52:25.415Z", "published_at": "2024-04-05T19:49:47Z", "title": "Safe Text", "slug": "safe-text", "summary": "jango is very safe and secure by default. Any variables that are rendered automatically have their HTML entities escaped, to prevent malicious HTML being injected into templates unexpectedly.", "content": "<p>This prevents Cross Site Scripting (XSS) and other types of attacks to your site, in which visitors can be redirected to malware or have the page content changed unexpectedly, due to bad HTML being supplied by users.\r\nWhat if we need to use HTML entities in our output value? There are a couple of ways. Django has the built in filter safe which skips the encoding, if you know a string is safe to output verbatim. Generally you’d only want to use this with your own values, and not mark any user-supplied data as \"safe\".</p>", "tags": [3]}}, {"model": "blango_auth.User", "pk": 1, "fields": {"password": "argon2$argon2id$v=19$m=102400,t=2,p=8$S2hneUNEUzRVbUEzNGNRRzliTkxrRg$7IfB4eIJM4EmU70wcyB2mA", "last_login": "2024-05-10T08:41:25.843Z", "is_superuser": true, "username": "codio", "first_name": "codio", "last_name": "lgadi", "email": "codio@exemple.com", "is_staff": true, "is_active": true, "date_joined": "2024-04-05T16:06:16Z", "groups": [], "user_permissions": []}}, {"model": "blango_auth.User", "pk": 2, "fields": {"password": "pbkdf2_sha256$260000$33R45zRF9WiLURVMsoJtFr$+p37VgP/7+uxFI+X4zskrGk5UCSyKYRPejE1SCJlxf0=", "last_login": null, "is_superuser": false, "username": "moad", "first_name": "", "last_name": "", "email": "moad@example.com", "is_staff": false, "is_active": true, "date_joined": "2024-04-07T18:47:33Z", "groups": [], "user_permissions": []}}, {"model": "blango_auth.User", "pk": 3, "fields": {"password": "pbkdf2_sha256$260000$2f2mNfksvUtyam9WnzzRAG$wHowOjR6GCm1EK6Zp0Raf2ODXhRCLfXM6rxdMY/XbfY=", "last_login": null, "is_superuser": false, "username": "lgadi", "first_name": "<script>alert(\"Hello\");</script>", "last_name": "ibourek", "email": "Mouad@w-edu.ma", "is_staff": false, "is_active": true, "date_joined": "2024-04-07T22:12:48Z", "groups": [], "user_permissions": []}}]